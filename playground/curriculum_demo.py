# ── playground/observation_demo.py ──────────────────────────────
"""
Quick-and-dirty script to print the Observation generated by
MinecraftObservationBuilder.  Nothing here is part of the formal
test-suite – just for eyeballing.
"""

from pprint import pprint
from typing import List

# --- Domain & Adapters imports ---------------------------------
# 依存する側はすべて DI で解決できる実装が前提
from domain.ports.observation_builder_port import ObservationBuilderPort
from domain.models.event import Event
from domain.models.task import Task

# ---------- helper ------------------------------------------------


def dummy_event() -> Event:
    """dummy event"""
    return Event(
        position={"x": 10.5, "y": 64.0, "z": -5.2},
        inventory={"oak_log": 3, "wooden_pickaxe": 1},
        health=18.5,
        hunger=15.0,
        biome="forest",
        nearby_blocks=["grass", "dirt", "stone", "oak_log"],
        nearby_entities={"cow": 5.0},
        time="day",
        other_blocks="iron_ore",
        equipment={"helmet": "leather_helmet"},
        chests="Chest 1: iron_ingot: 8",
    )


def dummy_tasks() -> List[Task]:
    return [
        Task(task="Mine 1 wood log", reasoning="Need wood", context="Tutorial"),
        Task(
            task="Craft wooden pickaxe",
            reasoning="Need tool",
            context="Early-game crafting",
        ),
    ]


# ---------- main --------------------------------------------------

def main(builder: ObservationBuilderPort) -> None:
    print("\n=== Input Event dataclass ===")
    pprint(dummy_event())
    
    obs = builder.build(
        event=dummy_event(),
        completed=dummy_tasks()[:1],  # 1 completed
        failed=dummy_tasks()[1:],     # 1 failed
    )


    print("\n=== Raw Observation dataclass ===")
    pprint(obs)

    print("\n=== As pretty text (each field) ===")
    for field_name, value in vars(obs).items():
        print(f"[{field_name}]")
        pprint(value)
        print("-" * 40)


if __name__ == "__main__":
    builder = ObservationBuilderPort()  # Concrete adapter
    main(builder)

# ────────────────────────────────────────────────────────────────